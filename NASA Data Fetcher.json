{
  "name": "NASA Data Copy",
  "nodes": [
    {
      "parameters": {
        "url": "https://raw.githubusercontent.com/rdvraval19/test/main/test.csv",
        "options": {
          "timeout": 30000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -2112,
        -768
      ],
      "id": "14e0f92a-03a9-4cb0-b542-8385ca2d90f4",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "path": "cc922ff2-7efa-4717-a607-b82ae72a71b8",
        "responseMode": "responseNode",
        "options": {
          "rawBody": false
        }
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        -2336,
        -800
      ],
      "id": "a9f39643-fbf5-48ec-ace4-e90aece1cce2",
      "name": "Webhook",
      "webhookId": "cc922ff2-7efa-4717-a607-b82ae72a71b8"
    },
    {
      "parameters": {
        "respondWith": "allIncomingItems",
        "options": {
          "responseKey": ""
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        -864,
        -240
      ],
      "id": "d859b9f0-a050-41bc-8f88-e9461e0ef85d",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "url": "https://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "db",
              "value": "pmc"
            },
            {
              "name": "id",
              "value": "=={{ $json.pmcid_number }}"
            },
            {
              "name": "retmode",
              "value": "xml"
            },
            {
              "name": "rettype",
              "value": "full"
            },
            {
              "name": "api_key",
              "value": "a57692afeda6862986c4a71a349c18d53f08"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "neverError": true
            }
          },
          "timeout": 30000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -2144,
        -512
      ],
      "id": "f01ae0da-02e3-4ddb-949f-1d1cd8a55707",
      "name": "HTTP Request1",
      "retryOnFail": false
    },
    {
      "parameters": {
        "jsCode": "const input = $input.first().json;\nlet csvText = typeof input === 'string' ? input : (input.body || input.data || '');\n\nconst lines = csvText.split('\\n').filter(l => l.trim());\nconst results = [];\n\nfor (let i = 1; i < lines.length; i++) {\n  const line = lines[i];\n  let parts = [];\n  let current = '';\n  let inQuotes = false;\n  \n  for (let char of line) {\n    if (char === '\"') inQuotes = !inQuotes;\n    else if (char === ',' && !inQuotes) {\n      parts.push(current.trim());\n      current = '';\n    } else current += char;\n  }\n  parts.push(current.trim());\n  \n  if (parts.length < 2) continue;\n  \n  const title = parts[0].replace(/^\"|\"$/g, '');\n  const url = parts[1].replace(/^\"|\"$/g, '');\n  const pmcMatch = url.match(/PMC(\\d+)/);\n  \n  if (pmcMatch) {\n    results.push({\n      json: {\n        title: title,\n        url: url,\n        pmcid: 'PMC' + pmcMatch[1],\n        pmcid_number: pmcMatch[1]\n      }\n    });\n  }\n}\n\nconsole.log('Parsed publications:', results.length);\nreturn results;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1920,
        -752
      ],
      "id": "fb623d80-9a5d-49c2-9bbf-94659f1973c3",
      "name": "Extract PMCID"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.groq.com/openai/v1/chat/completions",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer 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"
            }
          ]
        },
        "sendBody": true,
        "contentType": "raw",
        "rawContentType": "application/json",
        "body": "={{ JSON.stringify({ \"model\": \"llama-3.3-70b-versatile\", \"messages\": [{ \"role\": \"user\", \"content\": \"Analyze this NASA space biology research. Return ONLY a valid JSON object.\\n\\n\" + $json.aiInputText + \"\\n\\nJSON structure:\\n{\\n  \\\"summary\\\": \\\"2-3 sentences\\\",\\n  \\\"experiment_type\\\": \\\"type\\\",\\n  \\\"organisms_studied\\\": \\\"organisms\\\",\\n  \\\"space_conditions\\\": \\\"conditions\\\",\\n  \\\"key_findings\\\": [\\\"finding1\\\", \\\"finding2\\\", \\\"finding3\\\"],\\n  \\\"research_category\\\": \\\"category\\\",\\n  \\\"biological_systems\\\": \\\"systems\\\",\\n  \\\"implications\\\": \\\"implications\\\",\\n  \\\"mission_relevance\\\": \\\"relevance\\\"\\n}\" }], \"temperature\": 0.1, \"max_tokens\": 1200 }) }}",
        "options": {
          "response": {
            "response": {
              "neverError": true
            }
          },
          "timeout": 30000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -2080,
        -240
      ],
      "id": "74dc67ed-c77e-4729-9550-15e30497d9bd",
      "name": "HTTP Request2",
      "credentials": {
        "httpHeaderAuth": {
          "id": "QJGFm66QGAY72t1b",
          "name": "Header Auth account"
        }
      }
    },
    {
      "parameters": {
        "amount": 1
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -1696,
        -240
      ],
      "id": "5a63e1be-7afa-45e9-b215-482d557613c0",
      "name": "Wait1",
      "webhookId": "fa308e57-7ead-45b5-85fc-c8ed167fed9e"
    },
    {
      "parameters": {
        "url": "https://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "db",
              "value": "pubmed"
            },
            {
              "name": "id",
              "value": "={{ $('CSV parser + HTTP/XML fetch').first().json.pmid }}"
            },
            {
              "name": "rettype",
              "value": "abstract"
            },
            {
              "name": "retmode",
              "value": "XML"
            },
            {
              "name": "rettype",
              "value": "abstract"
            }
          ]
        },
        "options": {
          "response": {
            "response": {}
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -912,
        272
      ],
      "id": "394535a7-b72f-47e6-9cf0-69f8119ea402",
      "name": "HTTP Request3"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const input = $input.item.json;\n\nlet analysis = {\n  summary: '',\n  experiment_type: '',\n  organisms_studied: '',\n  key_findings: [],\n  space_conditions: '',\n  research_category: 'Other',\n  biological_systems: '',\n  implications: '',\n  mission_relevance: 'General spaceflight'\n};\n\nif (input.choices && input.choices[0]) {\n  try {\n    const aiText = input.choices[0].message.content;\n    const jsonMatch = aiText.match(/\\{[\\s\\S]*\\}/);\n    if (jsonMatch) {\n      const parsed = JSON.parse(jsonMatch[0]);\n      analysis = { ...analysis, ...parsed };\n    }\n  } catch (e) {\n    console.log('AI parse error:', e.message);\n  }\n}\n\n// Fallback to abstract if AI failed\nif (!analysis.summary && input.abstract) {\n  analysis.summary = input.abstract.substring(0, 300) + '...';\n}\n\nreturn {\n  json: {\n    pmcid: input.pmcid || '',\n    title: input.title || '',\n    url: input.url || '',\n    year: input.year || '',\n    authors: input.authors || '',\n    journal: input.journal || '',\n    abstract: input.abstract || '',\n    methods: input.methods || '',\n    results: input.results || '',\n    conclusion: input.conclusion || '',\n    summary: analysis.summary || 'No summary available',\n    experiment_type: analysis.experiment_type || 'Unknown',\n    organisms_studied: analysis.organisms_studied || 'Unknown',\n    key_findings: analysis.key_findings || [],\n    space_conditions: analysis.space_conditions || 'Unknown',\n    research_category: analysis.research_category || 'Other',\n    biological_systems: analysis.biological_systems || 'Unknown',\n    implications: analysis.implications || 'Unknown',\n    mission_relevance: analysis.mission_relevance || 'General spaceflight',\n    processed_at: new Date().toISOString()\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1472,
        -240
      ],
      "id": "2c24d02a-22ec-40b5-998b-d1b271e396f3",
      "name": "Code in JavaScript"
    },
    {
      "parameters": {
        "amount": 0.2
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -1936,
        -512
      ],
      "id": "4b04a84f-7ab2-4604-a2d1-a6da7852586b",
      "name": "Wait2",
      "webhookId": "ce98cce8-a53c-42a7-a24c-534b97d84738"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://degivfnvcbwcaoslvmvd.supabase.co/rest/v1/publications",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImRlZ2l2Zm52Y2J3Y2Fvc2x2bXZkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTk2NDI1ODIsImV4cCI6MjA3NTIxODU4Mn0.65oQGybS2bAEgREUjcxpADA4HKNiBOPSgYfy85tR0hk"
            },
            {
              "name": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImRlZ2l2Zm52Y2J3Y2Fvc2x2bXZkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTk2NDI1ODIsImV4cCI6MjA3NTIxODU4Mn0.65oQGybS2bAEgREUjcxpADA4HKNiBOPSgYfy85tR0hk"
            },
            {
              "name": "Prefer",
              "value": "return=representation"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json }}",
        "options": {
          "response": {
            "response": {
              "neverError": true
            }
          },
          "timeout": 30000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1200,
        -240
      ],
      "id": "1e8721d6-af83-46c4-a98a-14afc5d452eb",
      "name": "Save to Database",
      "credentials": {
        "httpHeaderAuth": {
          "id": "QJGFm66QGAY72t1b",
          "name": "Header Auth account"
        }
      }
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const xmlResponse = $input.item.json;\nlet xml = typeof xmlResponse === 'string' ? xmlResponse : (xmlResponse.body || xmlResponse.data || '');\n\n// Get original CSV data from execution context\nconst csvData = $input.item.json;\n\nfunction extractTag(xml, tagName) {\n  const regex = new RegExp(`<${tagName}[^>]*>([\\\\s\\\\S]*?)</${tagName}>`, 'i');\n  return xml.match(regex)?.[1] || '';\n}\n\nfunction extractAllTags(xml, tagName) {\n  const regex = new RegExp(`<${tagName}[^>]*>([\\\\s\\\\S]*?)</${tagName}>`, 'gi');\n  return Array.from(xml.matchAll(regex)).map(m => m[1]);\n}\n\nfunction cleanText(text) {\n  if (!text) return '';\n  return text.replace(/<[^>]+>/g, ' ').replace(/&\\w+;/g, ' ').replace(/\\s+/g, ' ').trim();\n}\n\nconst abstractXML = extractTag(xml, 'abstract');\nconst abstract = extractAllTags(abstractXML, 'p').map(cleanText).join(' ') || cleanText(abstractXML);\n\nconst bodyXML = extractTag(xml, 'body');\nconst sections = bodyXML.match(/<sec[^>]*>[\\s\\S]*?<\\/sec>/gi) || [];\n\nlet methods = '', results = '', conclusion = '';\n\nfor (let sec of sections) {\n  const sTitle = cleanText(extractTag(sec, 'title')).toLowerCase();\n  const text = extractAllTags(sec, 'p').map(cleanText).join(' ');\n  \n  if (!methods && (sTitle.includes('method') || sTitle.includes('material'))) methods = text;\n  if (!results && sTitle.includes('result')) results = text;\n  if (!conclusion && (sTitle.includes('discussion') || sTitle.includes('conclusion'))) conclusion = text;\n}\n\nconst year = extractTag(xml, 'pub-date').match(/<year>(\\d{4})<\\/year>/)?.[1] || '';\nconst journal = cleanText(extractTag(xml, 'journal-title'));\nconst authors = extractAllTags(xml, 'contrib').slice(0, 5).map(a => {\n  const s = cleanText(extractTag(a, 'surname'));\n  const g = cleanText(extractTag(a, 'given-names'));\n  return g ? `${g} ${s}` : s;\n}).filter(Boolean).join(', ');\n\nconst aiInputText = `Title: ${csvData.title}\n\nAbstract: ${abstract.substring(0, 1200)}\n\nMethods: ${methods.substring(0, 600)}\n\nResults: ${results.substring(0, 1200)}\n\nConclusion: ${conclusion.substring(0, 600)}`;\n\nreturn {\n  json: {\n    pmcid: csvData.pmcid,\n    title: csvData.title,\n    url: csvData.url,\n    year: year,\n    authors: authors,\n    journal: journal,\n    abstract: abstract.substring(0, 3000) || 'Not available',\n    methods: methods.substring(0, 3000) || 'Not available',\n    results: results.substring(0, 3000) || 'Not available',\n    conclusion: conclusion.substring(0, 2000) || 'Not available',\n    aiInputText: aiInputText\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1472,
        -512
      ],
      "id": "7da7cc9f-07a6-4851-90ff-51e71b4fea25",
      "name": "CSV parser + HTTP/XML fetch"
    },
    {
      "parameters": {
        "batchSize": 10,
        "options": {
          "reset": true
        }
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -1712,
        -752
      ],
      "id": "6b1313a3-4c02-40a0-b2ab-9aa1315d18f4",
      "name": "Loop Over Items"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "name": "Replace Me",
      "typeVersion": 1,
      "position": [
        -1264,
        -736
      ],
      "id": "df271685-4b79-400f-b9bb-f4f428f8b09b"
    }
  ],
  "pinData": {},
  "connections": {
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Extract PMCID",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request1": {
      "main": [
        [
          {
            "node": "Wait2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract PMCID": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request2": {
      "main": [
        [
          {
            "node": "Wait1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait1": {
      "main": [
        [
          {
            "node": "Code in JavaScript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript": {
      "main": [
        [
          {
            "node": "Save to Database",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait2": {
      "main": [
        [
          {
            "node": "CSV parser + HTTP/XML fetch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save to Database": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "CSV parser + HTTP/XML fetch": {
      "main": [
        [
          {
            "node": "HTTP Request2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "Save to Database",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Replace Me",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Replace Me": {
      "main": [
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "75480636-d9e7-47fa-b2a3-75c40f6bcca1",
  "meta": {
    "instanceId": "a1f8f821e86cd0c78ca5d985eb6543825bac1abdfac71616d5cd15b226ccf19e"
  },
  "id": "IshMSSg3ZNrMHIj2",
  "tags": []
}